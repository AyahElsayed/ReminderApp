{"version":3,"sources":["types.js","reminder.webp","App.js","actions/index.js","reducers/index.js","index.js"],"names":["ADD_REMINDER","REMOVE_REMINDER","CLEAR_REMINDERS","App","state","text","date","Date","render_Reminders","reminders","props","className","map","reminder","moment","fromNow","onClick","remove_Reminder","id","src","logo","type","value","this","placeholder","onChange","e","setState","target","placeholderText","selected","showTimeSelect","timeFormat","dateFormat","timeCaption","add_Reminder","clear_Reminders","Component","connect","action","Math","random","filter","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAAaA,EAAe,eACfC,EAAkB,kBAClBC,EAAkB,kB,kCCFhB,G,MAAA,IAA0B,uCCOlCC,E,4MACLC,MAAQ,CACNC,KAAO,GACPC,KAAO,IAAIC,M,EAGbC,iBAAmB,WAAM,IAChBC,EAAa,EAAKC,MAAlBD,UACP,OACE,oBAAIE,UAAU,aAAd,SAEIF,EAAUG,KAAI,SAAAC,GACZ,OACE,qBAAsBF,UAAU,kBAAhC,UACE,gCAAME,EAASR,KAAf,OACA,gCAAMS,IAAO,IAAIP,KAAKM,EAASP,OAAOS,UAAtC,OACA,qBAAKJ,UAAU,2BACdK,QAAU,kBAAK,EAAKN,MAAMO,gBAAgBJ,EAASK,KADpD,iBAHOL,EAASK,U,uDAYpB,IAAD,OACP,OACE,sBAAKP,UAAU,MAAf,UACE,qBAAKQ,IAAKC,IACV,qBAAKT,UAAU,iBAAf,SACE,sDAEF,uBACIA,UAAU,eACVU,KAAK,OACLC,MAAOC,KAAKnB,MAAMC,KAClBmB,YAAY,2BACZC,SAAU,SAACC,GAAD,OAAM,EAAKC,SAAS,CAACtB,KAAMqB,EAAEE,OAAON,WAQlD,cAAC,IAAD,CACEX,UAAU,gBACVW,MAAOC,KAAKnB,MAAME,KAClBuB,gBAAgB,aAChBC,SAAUP,KAAKnB,MAAME,KACrBmB,SAAU,SAACnB,GAAS,EAAKqB,SAAS,CAACrB,UACnCyB,gBAAc,EACdC,WAAW,QACXC,WAAW,oBACXC,YAAY,SAId,wBACElB,QAAY,WACT,EAAKN,MAAMyB,aAAa,EAAK/B,MAAMC,KAAO,EAAKD,MAAME,MACrD,EAAKqB,SAAS,CAACtB,KAAM,GAAKC,KAAM,MAGnCK,UAAU,4BANZ,0BAQCY,KAAKf,mBACN,wBACEQ,QAAY,WACV,EAAKN,MAAM0B,mBAEdzB,UAAU,2BAJX,oC,GAnEW0B,aA8FJC,eAAQ,SAAAlC,GACrB,MAAM,CACJK,UAAWL,KAEX,CAAC+B,aCxGuB,SAAC9B,EAAOC,GAMhC,MALe,CACXe,KAAMrB,EACNK,OACAC,SDoGUW,gBC9Fa,SAACC,GAK5B,MAJe,CACXG,KAAMpB,EACNiB,OD2F4BkB,gBCtFL,WAI3B,MAHe,CACXf,KAAMnB,KDgFCoC,CAIwCnC,G,yBElFxCM,EAtBG,WAAwB,IAAvBL,EAAsB,uDAAhB,GAAKmC,EAAW,uCACjC9B,EAAY,GAEhB,OAAI8B,EAAOlB,OAASrB,GAChBS,EAAS,sBAAOL,GAAP,CAAc,CAACC,KAAKkC,EAAOlC,KAAOC,KAAKiC,EAAOjC,KAAMY,GAAGsB,KAAKC,YAC9DhC,GAEF8B,EAAOlB,OAASpB,GACrBQ,EAAYL,EAAMsC,QAAO,SAAA7B,GAAQ,OAAIA,EAASK,KAAOqB,EAAOrB,MACrDT,GAEF8B,EAAOlB,OAASnB,GACrBO,EAAY,GACLA,GAGAL,GCTTuC,G,OAAQC,YAAYnC,IAE1BoC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJK,SAASC,eAAe,W","file":"static/js/main.c30f5ea2.chunk.js","sourcesContent":["export const ADD_REMINDER = 'ADD_REMINDER'\r\nexport const REMOVE_REMINDER = 'REMOVE_REMINDER'\r\nexport const CLEAR_REMINDERS = 'CLEAR_REMINDERS'","export default __webpack_public_path__ + \"static/media/reminder.d4306146.webp\";","import React, { Component } from 'react'\nimport {connect} from 'react-redux'\nimport {add_Reminder , remove_Reminder , clear_Reminders} from '../src/actions'\nimport moment from 'moment'\nimport DatePicker from \"react-datepicker\"; \nimport \"react-datepicker/dist/react-datepicker.css\"; \nimport logo from '../src/reminder.webp'\n class App extends Component {\n  state = {\n    text : '',\n    date : new Date(),\n  }\n\n  render_Reminders = () =>{\n    const {reminders} = this.props;\n    return (\n      <ul className=\"list-group\">\n        {\n          reminders.map(reminder => {\n            return(\n              <li key={reminder.id} className=\"list-group-item\">\n                <div>{reminder.text} </div>\n                <div>{moment(new Date(reminder.date)).fromNow()} </div>\n                <div className=\"closeicon btn btn-danger\"\n                 onClick={ ()=> this.props.remove_Reminder(reminder.id) }>X</div>\n              </li>\n            )\n          })\n        }\n      </ul>\n    )\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <img src={logo} />\n        <div className=\"reminder-title\">\n          <h2>What Should U Do ?</h2>\n        </div>\n        <input\n            className=\"form-control\"\n            type=\"text\" \n            value={this.state.text}\n            placeholder=\"Enter What U think... ? \"\n            onChange={(e)=> this.setState({text: e.target.value})} // الحاجة الي هكتبها هيحفظها\n        />\n        {/* <input\n            className=\"form-control\"\n            type=\"datetime-local\"\n            value={this.state.date} // بيفضيلي المكان بعد ما اكتب ادوس ادد\n            onChange={(e)=> this.setState({date: e.target.value})}\n        /> */}\n        <DatePicker \n          className=\"form-control \"\n          value={this.state.date}\n          placeholderText=\"Enter Date\"\n          selected={this.state.date}\n          onChange={(date)=> {this.setState({date})}}\n          showTimeSelect                  //عشان يقبل الوقت\n          timeFormat=\"HH:mm\"     \n          dateFormat=\"MMM d,yyy h:mm aa\"\n          timeCaption=\"time\"\n        />\n\n        \n        <button \n          onClick = { ()=> {\n             this.props.add_Reminder(this.state.text , this.state.date) \n             this.setState({text: \"\" , date: \"\"})\n            }\n            }\n          className=\"btn btn-primary btn-block\">Add reminder\n        </button>\n        {this.render_Reminders()}\n        <button\n          onClick = { ()=> {\n            this.props.clear_Reminders()\n          }}\n         className=\"btn btn-danger btn-block\">\n           Clear reminders\n         </button>\n        \n      </div>\n    )\n  }\n}\n\n// function mapDispatchToProps(dispatch) {\n//   return{\n//     add_Reminder: () => dispatch(add_Reminder())\n//   }\n// }      === {add_Reminder}\n\n///////////////////////////////////////////////////////\n\n// function mapStateToProps(state) {\n//   return{\n//     reminders: state\n//   }\n// }\n\nexport default connect(state => {\n  return{\n    reminders: state\n  }\n} , {add_Reminder,remove_Reminder , clear_Reminders}) (App) ","import {ADD_REMINDER , CLEAR_REMINDERS, REMOVE_REMINDER} from '../types'\r\nexport const add_Reminder = (text , date) => {\r\n    const action = {\r\n        type: ADD_REMINDER,\r\n        text,\r\n        date\r\n    }\r\n    return action;\r\n\r\n} \r\n\r\nexport const remove_Reminder = (id) => {\r\n    const action = {\r\n        type: REMOVE_REMINDER,\r\n        id \r\n    }\r\n    return action;\r\n}\r\n\r\nexport const clear_Reminders = () => {\r\n    const action = {\r\n        type: CLEAR_REMINDERS,\r\n    }\r\n    return action\r\n}","import {ADD_REMINDER, CLEAR_REMINDERS, REMOVE_REMINDER} from '../types'\r\nconst reminders = (state=[] , action) => {\r\n    let reminders = []\r\n\r\n    if (action.type === ADD_REMINDER) {\r\n        reminders = [...state, {text:action.text , date:action.date, id:Math.random()}]\r\n        return reminders;\r\n    } \r\n    else if (action.type === REMOVE_REMINDER){\r\n        reminders = state.filter(reminder => reminder.id !== action.id)\r\n        return reminders\r\n    }\r\n    else if (action.type === CLEAR_REMINDERS){\r\n        reminders = []\r\n        return reminders\r\n    }\r\n    else {\r\n        return state\r\n    }\r\n\r\n    \r\n\r\n}\r\nexport default reminders;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport reminders from './reducers/index';\nimport './style.css'\nconst store = createStore(reminders)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}