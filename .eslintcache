[{"D:\\front end\\react\\react-redux-app\\reminder\\src\\index.js":"1","D:\\front end\\react\\react-redux-app\\reminder\\src\\App.js":"2","D:\\front end\\react\\react-redux-app\\reminder\\src\\reducers\\index.js":"3","D:\\front end\\react\\react-redux-app\\reminder\\src\\types.js":"4","D:\\front end\\react\\react-redux-app\\reminder\\src\\actions\\index.js":"5"},{"size":676,"mtime":1609095837685,"results":"6","hashOfConfig":"7"},{"size":3106,"mtime":1609098675023,"results":"8","hashOfConfig":"7"},{"size":646,"mtime":1609090908675,"results":"9","hashOfConfig":"7"},{"size":142,"mtime":1609090654488,"results":"10","hashOfConfig":"7"},{"size":499,"mtime":1609090793226,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"pybgy6",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\front end\\react\\react-redux-app\\reminder\\src\\index.js",[],["24","25"],"D:\\front end\\react\\react-redux-app\\reminder\\src\\App.js",["26"],"import React, { Component } from 'react'\nimport {connect} from 'react-redux'\nimport {add_Reminder , remove_Reminder , clear_Reminders} from '../src/actions'\nimport moment from 'moment'\nimport DatePicker from \"react-datepicker\"; \nimport \"react-datepicker/dist/react-datepicker.css\"; \nimport logo from '../src/reminder.webp'\n class App extends Component {\n  state = {\n    text : '',\n    date : new Date(),\n  }\n\n  render_Reminders = () =>{\n    const {reminders} = this.props;\n    return (\n      <ul className=\"list-group\">\n        {\n          reminders.map(reminder => {\n            return(\n              <li key={reminder.id} className=\"list-group-item\">\n                <div>{reminder.text} </div>\n                <div>{moment(new Date(reminder.date)).fromNow()} </div>\n                <div className=\"closeicon btn btn-danger\"\n                 onClick={ ()=> this.props.remove_Reminder(reminder.id) }>X</div>\n              </li>\n            )\n          })\n        }\n      </ul>\n    )\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <img src={logo} />\n        <div className=\"reminder-title\">\n          <h2>What Should U Do ?</h2>\n        </div>\n        <input\n            className=\"form-control\"\n            type=\"text\" \n            value={this.state.text}\n            placeholder=\"Enter What U think... ? \"\n            onChange={(e)=> this.setState({text: e.target.value})} // الحاجة الي هكتبها هيحفظها\n        />\n        {/* <input\n            className=\"form-control\"\n            type=\"datetime-local\"\n            value={this.state.date} // بيفضيلي المكان بعد ما اكتب ادوس ادد\n            onChange={(e)=> this.setState({date: e.target.value})}\n        /> */}\n        <DatePicker \n          className=\"form-control \"\n          value={this.state.date}\n          placeholderText=\"Enter Date\"\n          selected={this.state.date}\n          onChange={(date)=> {this.setState({date})}}\n          showTimeSelect                  //عشان يقبل الوقت\n          timeFormat=\"HH:mm\"     \n          dateFormat=\"MMM d,yyy h:mm aa\"\n          timeCaption=\"time\"\n        />\n\n        \n        <button \n          onClick = { ()=> {\n             this.props.add_Reminder(this.state.text , this.state.date) \n             this.setState({text: \"\" , date: \"\"})\n            }\n            }\n          className=\"btn btn-primary btn-block\">Add reminder\n        </button>\n        {this.render_Reminders()}\n        <button\n          onClick = { ()=> {\n            this.props.clear_Reminders()\n          }}\n         className=\"btn btn-danger btn-block\">\n           Clear reminders\n         </button>\n        \n      </div>\n    )\n  }\n}\n\n// function mapDispatchToProps(dispatch) {\n//   return{\n//     add_Reminder: () => dispatch(add_Reminder())\n//   }\n// }      === {add_Reminder}\n\n///////////////////////////////////////////////////////\n\n// function mapStateToProps(state) {\n//   return{\n//     reminders: state\n//   }\n// }\n\nexport default connect(state => {\n  return{\n    reminders: state\n  }\n} , {add_Reminder,remove_Reminder , clear_Reminders}) (App) ","D:\\front end\\react\\react-redux-app\\reminder\\src\\reducers\\index.js",[],"D:\\front end\\react\\react-redux-app\\reminder\\src\\types.js",[],"D:\\front end\\react\\react-redux-app\\reminder\\src\\actions\\index.js",[],{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":36,"column":9,"nodeType":"33","endLine":36,"endColumn":27},"no-native-reassign",["34"],"no-negated-in-lhs",["35"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]